#include "Example.h"

Example::Example()
    : numAssignees(0), numPlaces(0), matrix(NULL), posLabels(NULL), colorVertex(colors[VERTEXCOLOR]), colorLink(colors[LINKCOLOR]),
            colorLabel(colors[LABELCOLOR]), colorTitle(colors[TITLECOLOR]), changed(false)
{
    name[0] = L'\0';
    descrypt[0] = L'\0';
    titleAssignees[0] = L'\0';
    titlePlaces[0] = L'\0';
}

Example::Example(LPCTSTR filename)
    : changed(false)
{
    TCHAR shortBuffer[256], buffer[2048];
   unsigned i,j;

    FILE* file = _tfopen(filename, _T("r, ccs=UTF-8"));

    //–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π –æ –ø—Ä–∏–º–µ—Ä–µ
    if(_ftscanf(file, _T("%255[^\n]\n%2047[^üçÑ]üçÑ\n%255[^\n]\n%255[^\n]\n"), name, descrypt, titleAssignees, titlePlaces) != 4)
        MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ–±—â–∏—Ö —Å–≤–µ–¥–µ–Ω–∏–π"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);

    //–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏–π –æ–± –∏—Å—Ö–æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ
    if(_ftscanf(file, _T("%u %u\n"), &numAssignees, &numPlaces) != 2)
            MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);
    matrix = (int*) malloc(sizeof(int) * numAssignees * numPlaces);
    if(matrix == NULL)
        MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–¥ –º–∞—Ç—Ä–∏—Ü—É"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);
    for(i = 0; i < numAssignees; i++)
    {
        for(j = 0; j < numPlaces - 1; j++)
            if(_ftscanf(file, _T("%d "),  &matrix[i * numPlaces + j]) != 1)
                MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);
        if(_ftscanf(file, _T("%d\n"), &matrix[i * numPlaces + j]) != 1)
            MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);
    }

    //–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏–π –æ –Ω–∞–¥–ø–∏—Å—è—Ö –≤–µ—Ä—à–∏–Ω
    for(i = 0; i < (numAssignees + numPlaces); i++)
    {
        if(_ftscanf(file, _T("%7[^\n]\n"), shortBuffer) != 1)
            MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞–¥–ø–∏—Å–∏ –≤–µ—Ä—à–∏–Ω—ã"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);
        vertexLabels.push_back(_tcsdup(shortBuffer));
    }

    //–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏–π –æ –Ω–∞–¥–ø–∏—Å—è—Ö
    while(1)
    {
        if(_ftscanf(file, _T("%255[^\n]\n"), shortBuffer) != 1)
            MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞–¥–ø–∏—Å–∏"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);
        if(!_tcscmp(shortBuffer, _T("üç∫")))
            break;
        labels.push_back(_tcsdup(shortBuffer));
    }

    //–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏–π –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –Ω–∞–¥–ø–∏—Å–µ–π
    posLabels = (LPPOINT)malloc(sizeof(POINT) * labels.size());
    if(posLabels == NULL)
        MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–¥–ø–∏—Å–µ–π"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);
    for(i = 0; i < labels.size(); i++)
        if(_ftscanf(file, _T("%d %d\n"), &posLabels[i].x, &posLabels[i].y) != 2)
            MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞–¥–ø–∏—Å–∏"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);

    //–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏–π –æ —Ü–≤–µ—Ç–∞—Ö
    if(_ftscanf(file, _T("%x %x %x %x\n"), &colors[VERTEXCOLOR], &colors[LINKCOLOR], &colors[LABELCOLOR], &colors[TITLECOLOR]) != 4)
        MessageBox(NULL, _T("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–≤–µ—Ç–∞—Ö"), _T("–û—à–∏–±–∫–∞"), MB_OK | MB_ICONERROR);

#ifdef TEST_EXAMPLE_LOAD
    MessageBox(NULL, name, _T("–ò–º—è"), MB_OK);
    MessageBox(NULL, descrypt, _T("–û–ø–∏—Å–∞–Ω–∏–µ"), MB_OK);
    MessageBox(NULL, titleAssignees, _T("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–∑–Ω–∞—á–∞–µ–º—ã—Ö"), MB_OK);
    MessageBox(NULL, titlePlaces, _T("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—Ç"), MB_OK);

    buffer[0] =  _T('\0');
    for(i = 0; i < numAssignees; i++)
    {
        for(j = 0; j < numPlaces - 1; j++)
        {
            _stprintf(shortBuffer, _T("%d "), matrix[i * numPlaces + j]);
            _tcscat(buffer, shortBuffer);
        }
        _stprintf(shortBuffer, _T("%d\n"), matrix[i * numPlaces + j]);
        _tcscat(buffer, shortBuffer);
    }
    MessageBox(NULL, buffer, _T("–ú–∞—Ç—Ä–∏—Ü–∞"), MB_OK);

    for(LPTSTR label : vertexLabels)
        MessageBox(NULL, label, _T("–ù–∞–¥–ø–∏—Å–∏ –≤–µ—Ä—à–∏–Ω"), MB_OK);

    for(LPTSTR label : labels)
        MessageBox(NULL, label, _T("–ù–∞–¥–ø–∏—Å—å"), MB_OK);

    buffer[0] =  _T('\0');
    for(i = 0; i < labels.size(); i++)
    {
        _stprintf(shortBuffer, _T("%d %d\n"), posLabels[i].x, posLabels[i].y);
        _tcscat(buffer, shortBuffer);
    }
    MessageBox(NULL, buffer, _T("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–¥–ø–∏—Å–µ–π"), MB_OK);

    _stprintf(buffer, _T("%X %X %X %X\n"), colors[VERTEXCOLOR], colors[LINKCOLOR], colors[LABELCOLOR], colors[TITLECOLOR]);
    MessageBox(NULL, buffer, _T("–¶–≤–µ—Ç–∞"), MB_OK);

#endif //TEST_EXAMPLE_LOAD

    fclose(file);
}

void Example::Save(LPCTSTR filename) const
{
    unsigned i,j;
    FILE* file = _tfopen(filename, _T("w, ccs=UTF-8"));

    _ftprintf(file, _T("%s\n%süçÑ\n%s\n%s\n"), name, descrypt, titleAssignees, titlePlaces);

    _ftprintf(file, _T("%u %u\n"), numAssignees, numPlaces);
    for(i = 0; i < numAssignees; i++)
    {
        for(j = 0; j < numPlaces - 1; j++)
            _ftprintf(file, _T("%d "),  matrix[i * numPlaces + j]);
        _ftprintf(file, _T("%d\n"), matrix[i * numPlaces + j]);
    }

    for(LPTSTR label : vertexLabels)
        _ftprintf(file, _T("%s\n"), label);

    for(LPTSTR label : labels)
        _ftprintf(file, _T("%s\n"), label);
    _ftprintf(file, _T("üç∫\n"));

    for(i = 0; i < labels.size(); i++)
        _ftprintf(file, _T("%d %d\n"), posLabels[i].x, posLabels[i].y);

    _ftprintf(file, _T("%X %X %X %X\n"), colors[VERTEXCOLOR], colors[LINKCOLOR], colors[LABELCOLOR], colors[TITLECOLOR]);

    fclose(file);
}

Example::~Example()
{
    free(matrix);
    for(LPTSTR label : vertexLabels)
        free((void*)label);
    for(LPTSTR label : labels)
        free((void*)label);
    free(posLabels);
}
